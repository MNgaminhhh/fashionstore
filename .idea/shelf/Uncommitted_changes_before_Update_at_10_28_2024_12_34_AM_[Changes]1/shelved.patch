Index: server/sql/queries/vendor_q.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- name: GetVendorByUserId :one\r\nSELECT * FROM vendors\r\nWHERE vendors.user_id = $1;\r\n\r\n-- name: AddVendor :exec\r\nINSERT INTO vendors (user_id,\r\n                     full_name,\r\n                     email,\r\n                     phone_number,\r\n                     store_name,\r\n                     description,\r\n                     address,\r\n                     banner,\r\n                     created_by,\r\n                     updated_by)\r\nVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\r\n\r\n-- name: UpdateVendorStatus :exec\r\nUPDATE vendors\r\nSET status = $1, updated_by = $2\r\nWHERE user_id = $3;\r\n\r\n-- name: GetAllVendors :many\r\nSELECT *\r\nFROM vendors\r\nWHERE\r\n    ($1::vendors_status = 'null' OR status = $1)\r\n  AND (store_name ILIKE '%' || $2::text || '%' OR $2 = '')\r\n  AND (full_name ILIKE '%' || $3::text || '%' OR $3 = '')\r\n  AND (address ILIKE '%' || $4::text || '%' OR $4 = '')\r\n  AND (description ILIKE $5::text OR $5 = '');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/sql/queries/vendor_q.sql b/server/sql/queries/vendor_q.sql
--- a/server/sql/queries/vendor_q.sql	(revision e1aafe4b1df6bab24075ee9b29bade79454f0918)
+++ b/server/sql/queries/vendor_q.sql	(date 1730050416737)
@@ -27,5 +27,5 @@
     ($1::vendors_status = 'null' OR status = $1)
   AND (store_name ILIKE '%' || $2::text || '%' OR $2 = '')
   AND (full_name ILIKE '%' || $3::text || '%' OR $3 = '')
-  AND (address ILIKE '%' || $4::text || '%' OR $4 = '')
-  AND (description ILIKE $5::text OR $5 = '');
\ No newline at end of file
+  AND (address ILIKE '%' || $4::text || '%' OR $2 = '')
+  AND (description ILIKE '%' || $5::text || '%' OR $2 = '')
\ No newline at end of file
Index: server/internal/repository/vendor_repository.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package repository\r\n\r\nimport (\r\n\t\"backend/global\"\r\n\t\"backend/internal/database\"\r\n\t\"backend/internal/validator\"\r\n\t\"fmt\"\r\n\t\"github.com/google/uuid\"\r\n\t\"log\"\r\n\t\"strings\"\r\n)\r\n\r\ntype IVendorRepository interface {\r\n\tBecomeVendor(nVendor *database.Vendor) error\r\n\tUpdateStatus(userId, updatedBy uuid.UUID, status database.VendorsStatus) error\r\n\tGetVendor(userId uuid.UUID) (*database.Vendor, error)\r\n\tGetAllVendors(customParams validator.FilterVendorRequest) ([]database.Vendor, error)\r\n}\r\n\r\ntype VendorRepository struct {\r\n\tsqlc *database.Queries\r\n}\r\n\r\nfunc NewVendorRepository() IVendorRepository {\r\n\treturn &VendorRepository{sqlc: database.New(global.Mdb)}\r\n}\r\n\r\nfunc (vr *VendorRepository) BecomeVendor(nVendor *database.Vendor) error {\r\n\tparam := database.AddVendorParams{\r\n\t\tUserID:      nVendor.UserID,\r\n\t\tFullName:    nVendor.FullName,\r\n\t\tEmail:       nVendor.Email,\r\n\t\tPhoneNumber: nVendor.PhoneNumber,\r\n\t\tStoreName:   nVendor.StoreName,\r\n\t\tBanner:      nVendor.Banner,\r\n\t\tDescription: nVendor.Description,\r\n\t\tAddress:     nVendor.Address,\r\n\t\tCreatedBy:   nVendor.CreatedBy,\r\n\t\tUpdatedBy:   nVendor.UpdatedBy,\r\n\t}\r\n\terr := vr.sqlc.AddVendor(ctx, param)\r\n\treturn err\r\n}\r\n\r\nfunc (vr *VendorRepository) UpdateStatus(userId, updatedBy uuid.UUID, status database.VendorsStatus) error {\r\n\tparam := database.UpdateVendorStatusParams{\r\n\t\tStatus: database.NullVendorsStatus{\r\n\t\t\tVendorsStatus: status,\r\n\t\t\tValid:         true,\r\n\t\t},\r\n\t\tUpdatedBy: uuid.NullUUID{\r\n\t\t\tUUID:  updatedBy,\r\n\t\t\tValid: true,\r\n\t\t},\r\n\t\tUserID: userId,\r\n\t}\r\n\treturn vr.sqlc.UpdateVendorStatus(ctx, param)\r\n}\r\n\r\nfunc (vr *VendorRepository) GetVendor(userId uuid.UUID) (*database.Vendor, error) {\r\n\tvendor, err := vr.sqlc.GetVendorByUserId(ctx, userId)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\treturn &vendor, nil\r\n}\r\n\r\nfunc (vr *VendorRepository) GetAllVendors(customParams validator.FilterVendorRequest) ([]database.Vendor, error) {\r\n\tparam := database.GetAllVendorsParams{\r\n\t\tColumn1: database.VendorsStatusNull,\r\n\t\tColumn2: customParams.StoreName,\r\n\t\tColumn3: customParams.FullName,\r\n\t\tColumn4: customParams.Address,\r\n\t\tColumn5: \"\",\r\n\t}\r\n\tif customParams.Status != \"\" {\r\n\t\tparam.Column1 = database.VendorsStatus(strings.ToLower(customParams.Status))\r\n\t}\r\n\tif customParams.Description != \"\" {\r\n\t\tparam.Column5 = fmt.Sprintf(\"%%%s%%\", customParams.Description)\r\n\t}\r\n\tlog.Println(\"Params: \", param)\r\n\tvendors, err := vr.sqlc.GetAllVendors(ctx, param)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\treturn vendors, nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/internal/repository/vendor_repository.go b/server/internal/repository/vendor_repository.go
--- a/server/internal/repository/vendor_repository.go	(revision e1aafe4b1df6bab24075ee9b29bade79454f0918)
+++ b/server/internal/repository/vendor_repository.go	(date 1730049609012)
@@ -6,7 +6,6 @@
 	"backend/internal/validator"
 	"fmt"
 	"github.com/google/uuid"
-	"log"
 	"strings"
 )
 
@@ -70,7 +69,7 @@
 		Column1: database.VendorsStatusNull,
 		Column2: customParams.StoreName,
 		Column3: customParams.FullName,
-		Column4: customParams.Address,
+		Column4: strings.Trim(customParams.Address, " "),
 		Column5: "",
 	}
 	if customParams.Status != "" {
@@ -79,7 +78,7 @@
 	if customParams.Description != "" {
 		param.Column5 = fmt.Sprintf("%%%s%%", customParams.Description)
 	}
-	log.Println("Params: ", param)
+	fmt.Printf("Params: %+v\n", param)
 	vendors, err := vr.sqlc.GetAllVendors(ctx, param)
 	if err != nil {
 		return nil, err
Index: server/internal/database/vendor_q.sql.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Code generated by sqlc. DO NOT EDIT.\r\n// versions:\r\n//   sqlc v1.27.0\r\n// source: vendor_q.sql\r\n\r\npackage database\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"database/sql\"\r\n\r\n\t\"github.com/google/uuid\"\r\n)\r\n\r\nconst addVendor = `-- name: AddVendor :exec\r\nINSERT INTO vendors (user_id,\r\n                     full_name,\r\n                     email,\r\n                     phone_number,\r\n                     store_name,\r\n                     description,\r\n                     address,\r\n                     banner,\r\n                     created_by,\r\n                     updated_by)\r\nVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n`\r\n\r\ntype AddVendorParams struct {\r\n\tUserID      uuid.UUID\r\n\tFullName    string\r\n\tEmail       string\r\n\tPhoneNumber string\r\n\tStoreName   string\r\n\tDescription sql.NullString\r\n\tAddress     string\r\n\tBanner      string\r\n\tCreatedBy   uuid.NullUUID\r\n\tUpdatedBy   uuid.NullUUID\r\n}\r\n\r\nfunc (q *Queries) AddVendor(ctx context.Context, arg AddVendorParams) error {\r\n\t_, err := q.db.ExecContext(ctx, addVendor,\r\n\t\targ.UserID,\r\n\t\targ.FullName,\r\n\t\targ.Email,\r\n\t\targ.PhoneNumber,\r\n\t\targ.StoreName,\r\n\t\targ.Description,\r\n\t\targ.Address,\r\n\t\targ.Banner,\r\n\t\targ.CreatedBy,\r\n\t\targ.UpdatedBy,\r\n\t)\r\n\treturn err\r\n}\r\n\r\nconst getAllVendors = `-- name: GetAllVendors :many\r\nSELECT id, user_id, full_name, email, phone_number, store_name, status, description, address, banner, created_at, updated_at, created_by, updated_by\r\nFROM vendors\r\nWHERE\r\n    ($1::vendors_status = 'null' OR status = $1)\r\n  AND (store_name ILIKE '%' || $2::text || '%' OR $2 = '')\r\n  AND (full_name ILIKE '%' || $3::text || '%' OR $3 = '')\r\n  AND (address ILIKE '%' || $4::text || '%' OR $4 = '')\r\n  AND (description ILIKE $5::text OR $5 = '')\r\n`\r\n\r\ntype GetAllVendorsParams struct {\r\n\tColumn1 VendorsStatus\r\n\tColumn2 string\r\n\tColumn3 string\r\n\tColumn4 string\r\n\tColumn5 string\r\n}\r\n\r\nfunc (q *Queries) GetAllVendors(ctx context.Context, arg GetAllVendorsParams) ([]Vendor, error) {\r\n\trows, err := q.db.QueryContext(ctx, getAllVendors,\r\n\t\targ.Column1,\r\n\t\targ.Column2,\r\n\t\targ.Column3,\r\n\t\targ.Column4,\r\n\t\targ.Column5,\r\n\t)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tdefer rows.Close()\r\n\tvar items []Vendor\r\n\tfor rows.Next() {\r\n\t\tvar i Vendor\r\n\t\tif err := rows.Scan(\r\n\t\t\t&i.ID,\r\n\t\t\t&i.UserID,\r\n\t\t\t&i.FullName,\r\n\t\t\t&i.Email,\r\n\t\t\t&i.PhoneNumber,\r\n\t\t\t&i.StoreName,\r\n\t\t\t&i.Status,\r\n\t\t\t&i.Description,\r\n\t\t\t&i.Address,\r\n\t\t\t&i.Banner,\r\n\t\t\t&i.CreatedAt,\r\n\t\t\t&i.UpdatedAt,\r\n\t\t\t&i.CreatedBy,\r\n\t\t\t&i.UpdatedBy,\r\n\t\t); err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t\titems = append(items, i)\r\n\t}\r\n\tif err := rows.Close(); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tif err := rows.Err(); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\treturn items, nil\r\n}\r\n\r\nconst getVendorByUserId = `-- name: GetVendorByUserId :one\r\nSELECT id, user_id, full_name, email, phone_number, store_name, status, description, address, banner, created_at, updated_at, created_by, updated_by FROM vendors\r\nWHERE vendors.user_id = $1\r\n`\r\n\r\nfunc (q *Queries) GetVendorByUserId(ctx context.Context, userID uuid.UUID) (Vendor, error) {\r\n\trow := q.db.QueryRowContext(ctx, getVendorByUserId, userID)\r\n\tvar i Vendor\r\n\terr := row.Scan(\r\n\t\t&i.ID,\r\n\t\t&i.UserID,\r\n\t\t&i.FullName,\r\n\t\t&i.Email,\r\n\t\t&i.PhoneNumber,\r\n\t\t&i.StoreName,\r\n\t\t&i.Status,\r\n\t\t&i.Description,\r\n\t\t&i.Address,\r\n\t\t&i.Banner,\r\n\t\t&i.CreatedAt,\r\n\t\t&i.UpdatedAt,\r\n\t\t&i.CreatedBy,\r\n\t\t&i.UpdatedBy,\r\n\t)\r\n\treturn i, err\r\n}\r\n\r\nconst updateVendorStatus = `-- name: UpdateVendorStatus :exec\r\nUPDATE vendors\r\nSET status = $1, updated_by = $2\r\nWHERE user_id = $3\r\n`\r\n\r\ntype UpdateVendorStatusParams struct {\r\n\tStatus    NullVendorsStatus\r\n\tUpdatedBy uuid.NullUUID\r\n\tUserID    uuid.UUID\r\n}\r\n\r\nfunc (q *Queries) UpdateVendorStatus(ctx context.Context, arg UpdateVendorStatusParams) error {\r\n\t_, err := q.db.ExecContext(ctx, updateVendorStatus, arg.Status, arg.UpdatedBy, arg.UserID)\r\n\treturn err\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/internal/database/vendor_q.sql.go b/server/internal/database/vendor_q.sql.go
--- a/server/internal/database/vendor_q.sql.go	(revision e1aafe4b1df6bab24075ee9b29bade79454f0918)
+++ b/server/internal/database/vendor_q.sql.go	(date 1730050046364)
@@ -62,7 +62,7 @@
     ($1::vendors_status = 'null' OR status = $1)
   AND (store_name ILIKE '%' || $2::text || '%' OR $2 = '')
   AND (full_name ILIKE '%' || $3::text || '%' OR $3 = '')
-  AND (address ILIKE '%' || $4::text || '%' OR $4 = '')
+  AND (position($4::text IN address) > 0 OR $4 = '')
   AND (description ILIKE $5::text OR $5 = '')
 `
 
Index: server/internal/validator/vendor_validator.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package validator\r\n\r\ntype BecomeVendorRequest struct {\r\n\tFullName    string `json:\"full_name\" validate:\"required\"`\r\n\tEmail       string `json:\"email\" validate:\"required,email\"`\r\n\tPhoneNumber string `json:\"phone_number\" validate:\"required,number\"`\r\n\tStoreName   string `json:\"store_name\" validate:\"required\"`\r\n\tBanner      string `json:\"banner\" validate:\"required\"`\r\n\tDescription string `json:\"description\"`\r\n\tAddress     string `json:\"address\" validate:\"required\"`\r\n}\r\n\r\ntype AdminUpdateVendorStatusRequest struct {\r\n\tUserId string `json:\"user_id\" validate:\"required\"`\r\n\tStatus string `json:\"status\" validate:\"required,oneof=pending accepted rejected\"`\r\n}\r\n\r\ntype FilterVendorRequest struct {\r\n\tStatus      string `query:\"status\" validate:\"oneof=pending accepted rejected\"`\r\n\tFullName    string `query:\"full_name\"`\r\n\tStoreName   string `query:\"store_name\"`\r\n\tDescription string `query:\"description\"`\r\n\tAddress     string `query:\"address\"`\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/internal/validator/vendor_validator.go b/server/internal/validator/vendor_validator.go
--- a/server/internal/validator/vendor_validator.go	(revision e1aafe4b1df6bab24075ee9b29bade79454f0918)
+++ b/server/internal/validator/vendor_validator.go	(date 1730050174098)
@@ -16,7 +16,7 @@
 }
 
 type FilterVendorRequest struct {
-	Status      string `query:"status" validate:"oneof=pending accepted rejected"`
+	Status      string `query:"status"`
 	FullName    string `query:"full_name"`
 	StoreName   string `query:"store_name"`
 	Description string `query:"description"`
Index: server/internal/controller/vendor_controller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller\r\n\r\nimport (\r\n\t\"backend/internal\"\r\n\t\"backend/internal/database\"\r\n\t\"backend/internal/service\"\r\n\t\"backend/internal/validator\"\r\n\t\"backend/pkg/response\"\r\n\t\"database/sql\"\r\n\t\"github.com/google/uuid\"\r\n\t\"github.com/labstack/echo\"\r\n\t\"strconv\"\r\n)\r\n\r\ntype VendorController struct {\r\n\tvendorService service.IVendorService\r\n}\r\n\r\nfunc NewVendorController(vendorService service.IVendorService) *VendorController {\r\n\treturn &VendorController{\r\n\t\tvendorService: vendorService,\r\n\t}\r\n}\r\n\r\nfunc (vc *VendorController) BecomeVendor(c echo.Context) error {\r\n\trole := c.Get(\"role\").(database.UserRole)\r\n\tif role != database.UserRoleCustomer {\r\n\t\treturn response.ErrorResponse(c, response.ErrCodeInvalidRole, \"Role must be customer\")\r\n\t}\r\n\tid := c.Get(\"uuid\").(string)\r\n\tuserId, _ := uuid.Parse(id)\r\n\tvar reqParams validator.BecomeVendorRequest\r\n\tif err := c.Bind(&reqParams); err != nil {\r\n\t\treturn response.ErrorResponse(c, response.ErrCodeParamInvalid, err.Error())\r\n\t}\r\n\tif err := c.Validate(reqParams); err != nil {\r\n\t\treturn response.ValidationResponse(c, response.ErrCodeParamInvalid, err)\r\n\t}\r\n\tvendor := &database.Vendor{\r\n\t\tUserID:      userId,\r\n\t\tFullName:    reqParams.FullName,\r\n\t\tEmail:       reqParams.Email,\r\n\t\tPhoneNumber: reqParams.PhoneNumber,\r\n\t\tStoreName:   reqParams.StoreName,\r\n\t\tBanner:      reqParams.Banner,\r\n\t\tDescription: sql.NullString{\r\n\t\t\tString: reqParams.Description,\r\n\t\t},\r\n\t\tAddress:   reqParams.Address,\r\n\t\tCreatedBy: uuid.NullUUID{UUID: userId, Valid: true},\r\n\t\tUpdatedBy: uuid.NullUUID{UUID: userId, Valid: true},\r\n\t}\r\n\r\n\tcode := vc.vendorService.BecomeVendor(vendor)\r\n\tif code != response.SuccessCode {\r\n\t\treturn response.ErrorResponse(c, code, \"Become a vendor fail\")\r\n\t}\r\n\treturn response.SuccessResponse(c, code, \"Become a vendor successfully\")\r\n}\r\n\r\nfunc (vc *VendorController) UpdateVendorStatusByAdmin(c echo.Context) error {\r\n\trole := c.Get(\"role\").(database.UserRole)\r\n\tif role != database.UserRoleAdmin {\r\n\t\treturn response.ErrorResponse(c, response.ErrCodeInvalidRole, \"Role must be admin\")\r\n\t}\r\n\tid := c.Get(\"uuid\").(string)\r\n\tadminId, _ := uuid.Parse(id)\r\n\tvar reqParams validator.AdminUpdateVendorStatusRequest\r\n\tif err := c.Bind(&reqParams); err != nil {\r\n\t\treturn response.ErrorResponse(c, response.ErrCodeParamInvalid, err.Error())\r\n\t}\r\n\tif err := c.Validate(reqParams); err != nil {\r\n\t\treturn response.ValidationResponse(c, response.ErrCodeParamInvalid, err)\r\n\t}\r\n\tuserId, _ := uuid.Parse(reqParams.UserId)\r\n\tcode := vc.vendorService.UpdateVendorStatus(userId, adminId, database.VendorsStatus(reqParams.Status))\r\n\tif code != response.SuccessCode {\r\n\t\treturn response.ErrorResponse(c, code, \"Update a vendor fail\")\r\n\t}\r\n\treturn response.SuccessResponse(c, code, \"Update a vendor successfully\")\r\n}\r\n\r\nfunc (vc *VendorController) GetVendor(c echo.Context) error {\r\n\tid := c.Param(\"user_id\")\r\n\tif id == \"\" {\r\n\t\treturn response.ErrorResponse(c, response.ErrCodeParamInvalid, \"Vendor ID is empty\")\r\n\t}\r\n\tuserId, _ := uuid.Parse(id)\r\n\tcode, vendor := vc.vendorService.GetVendor(userId)\r\n\tif code != response.SuccessCode {\r\n\t\treturn response.ErrorResponse(c, code, \"Get a vendor fail\")\r\n\t}\r\n\treturn response.SuccessResponse(c, code, vendor)\r\n}\r\n\r\nfunc (vc *VendorController) GetAllVendors(c echo.Context) error {\r\n\tvar param validator.FilterVendorRequest\r\n\tif err := c.Bind(&param); err != nil {\r\n\t\treturn response.ErrorResponse(c, response.ErrCodeParamInvalid, err.Error())\r\n\t}\r\n\tif err := c.Validate(param); err != nil {\r\n\t\treturn response.ValidationResponse(c, response.ErrCodeParamInvalid, err)\r\n\t}\r\n\tsortBy := c.QueryParam(\"sort_by\")\r\n\tsortOrder := c.QueryParam(\"sort_order\")\r\n\tlimit := c.QueryParam(\"limit\")\r\n\tpage := c.QueryParam(\"page\")\r\n\tcode, vendors := vc.vendorService.GetAllVendors(param, sortBy, sortOrder)\r\n\tif code != response.SuccessCode {\r\n\t\treturn response.ErrorResponse(c, code, \"Get vendor fail\")\r\n\t}\r\n\tpageSize := 10\r\n\tcurrentPage := 1\r\n\tif limit != \"\" {\r\n\t\tpageSize, _ = strconv.Atoi(limit)\r\n\t}\r\n\tif page != \"\" {\r\n\t\tcurrentPage, _ = strconv.Atoi(page)\r\n\t}\r\n\ttotalPages := internal.CalculateTotalPages(len(vendors), pageSize)\r\n\tvendorsPagination := internal.Paginate(vendors, currentPage, pageSize)\r\n\tdata := map[string]interface{}{\r\n\t\t\"vendors\":       vendorsPagination,\r\n\t\t\"total_results\": len(vendorsPagination),\r\n\t\t\"total_pages\":   totalPages,\r\n\t\t\"current_page\":  currentPage,\r\n\t}\r\n\treturn response.SuccessResponse(c, code, data)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/internal/controller/vendor_controller.go b/server/internal/controller/vendor_controller.go
--- a/server/internal/controller/vendor_controller.go	(revision e1aafe4b1df6bab24075ee9b29bade79454f0918)
+++ b/server/internal/controller/vendor_controller.go	(date 1730050174102)
@@ -98,9 +98,6 @@
 	if err := c.Bind(&param); err != nil {
 		return response.ErrorResponse(c, response.ErrCodeParamInvalid, err.Error())
 	}
-	if err := c.Validate(param); err != nil {
-		return response.ValidationResponse(c, response.ErrCodeParamInvalid, err)
-	}
 	sortBy := c.QueryParam("sort_by")
 	sortOrder := c.QueryParam("sort_order")
 	limit := c.QueryParam("limit")
Index: server/internal/repository/brands_repository.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/internal/repository/brands_repository.go b/server/internal/repository/brands_repository.go
new file mode 100644
--- /dev/null	(date 1729958801138)
+++ b/server/internal/repository/brands_repository.go	(date 1729958801138)
@@ -0,0 +1,35 @@
+package repository
+
+import (
+	"backend/global"
+	"backend/internal/database"
+	"backend/internal/params"
+	"database/sql"
+)
+
+type IBrandsRepository interface {
+	GetBrands(customParam params.GetBrandsParams) ([]database.Brand, error)
+}
+
+type BrandsRepository struct {
+	sqlc *database.Queries
+}
+
+func NewBrandsRepository(sqlc *database.Queries) IBrandsRepository {
+	return &BrandsRepository{sqlc: database.New(global.Mdb)}
+}
+
+func (br *BrandsRepository) GetBrands(customParam params.GetBrandsParams) ([]database.Brand, error) {
+	param := database.GetBrandsParams{
+		Visible: sql.NullBool{
+			Bool:  false,
+			Valid: false,
+		},
+		Column2: "",
+	}
+	brands, err := br.sqlc.GetBrands(ctx, param)
+	if err != nil {
+		return nil, err
+	}
+	return brands, nil
+}
Index: server/internal/service/brands_service.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/internal/service/brands_service.go b/server/internal/service/brands_service.go
new file mode 100644
--- /dev/null	(date 1729959435119)
+++ b/server/internal/service/brands_service.go	(date 1729959435119)
@@ -0,0 +1,30 @@
+package service
+
+import (
+	"backend/internal/database"
+	"backend/internal/params"
+	"backend/internal/repository"
+	"net/http"
+)
+
+type IBrandsService interface {
+	GetBrands(customParam params.GetBrandsParams) (int, []database.Brand)
+}
+
+type BrandsService struct {
+	brandsRepository *repository.BrandsRepository
+}
+
+func NewBrandsService(brandsRepository *repository.BrandsRepository) IBrandsService {
+	return &BrandsService{
+		brandsRepository: brandsRepository,
+	}
+}
+
+func (bs *BrandsService) GetBrands(customParam params.GetBrandsParams) (int, []database.Brand) {
+	brands, err := bs.brandsRepository.GetBrands(customParam)
+	if err != nil {
+		return http.StatusInternalServerError, nil
+	}
+	return http.StatusOK, brands
+}
Index: server/internal/controller/brands_controller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/internal/controller/brands_controller.go b/server/internal/controller/brands_controller.go
new file mode 100644
--- /dev/null	(date 1730000825685)
+++ b/server/internal/controller/brands_controller.go	(date 1730000825685)
@@ -0,0 +1,24 @@
+package controller
+
+import (
+	"backend/internal/service"
+)
+
+type BrandsController struct {
+	brandsService *service.BrandsService
+}
+
+func NewBrandsController(brandsService *service.BrandsService) *BrandsController {
+	return &BrandsController{
+		brandsService: brandsService,
+	}
+}
+
+//func (bc *BrandsController) GetBrands(c echo.Context) error {
+//	role := c.Get("role").(database.UserRole)
+//	if role != database.UserRoleAdmin {
+//		return response.ErrorResponse(c, response.ErrCodeInvalidRole, "get brands fail")
+//	}
+//
+//	code, brands := bc.brandsService.GetBrands()
+//}
