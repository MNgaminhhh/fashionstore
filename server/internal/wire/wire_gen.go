// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"backend/internal/controller"
	"backend/internal/repository"
	"backend/internal/service"
)

// Injectors from banner_wire.go:

func InitBannerRouterHandler() (*controller.BannersController, error) {
	iBannersRepository := repository.NewBannersRepository()
	iBannersService := service.NewBannerService(iBannersRepository)
	bannersController := controller.NewBannersController(iBannersService)
	return bannersController, nil
}

// Injectors from brand_wire.go:

func InitBrandRouterHandler() (*controller.BrandsController, error) {
	iBrandsRepository := repository.NewBrandsRepository()
	iBrandsService := service.NewBrandsService(iBrandsRepository)
	brandsController := controller.NewBrandsController(iBrandsService)
	return brandsController, nil
}

// Injectors from upload_wire.go:

func InitUploadFileRouterHandler() (*controller.UploadFileController, error) {
	iUploadFileRepository := repository.NewUploadFileRepository()
	iUploadFileService := service.NewUploadFileService(iUploadFileRepository)
	uploadFileController := controller.NewUploadFileController(iUploadFileService)
	return uploadFileController, nil
}

// Injectors from user_wire.go:

func InitUserRouterHandler() (*controller.UserController, error) {
	iUserRepository := repository.NewUserRepository()
	iUserService := service.NewUserService(iUserRepository)
	iAuthService := service.NewAuthService()
	userController := controller.NewUserController(iUserService, iAuthService)
	return userController, nil
}

// Injectors from vendor_wire.go:

func InitVendorRouterHandler() (*controller.VendorController, error) {
	iVendorRepository := repository.NewVendorRepository()
	iVendorService := service.NewVendorService(iVendorRepository)
	vendorController := controller.NewVendorController(iVendorService)
	return vendorController, nil
}
