// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: brands_q.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addBrand = `-- name: AddBrand :exec
INSERT INTO brands (name, visible, sequence, store_id, image) VALUES ($1, $2,$3,$4,$5)
`

type AddBrandParams struct {
	Name     string
	Visible  sql.NullBool
	Sequence int32
	StoreID  uuid.UUID
	Image    string
}

func (q *Queries) AddBrand(ctx context.Context, arg AddBrandParams) error {
	_, err := q.db.ExecContext(ctx, addBrand,
		arg.Name,
		arg.Visible,
		arg.Sequence,
		arg.StoreID,
		arg.Image,
	)
	return err
}

const getBrandById = `-- name: GetBrandById :one
SELECT id, sequence, store_id, name, image, visible
FROM brands
WHERE id = $1
`

func (q *Queries) GetBrandById(ctx context.Context, id uuid.UUID) (Brand, error) {
	row := q.db.QueryRowContext(ctx, getBrandById, id)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Sequence,
		&i.StoreID,
		&i.Name,
		&i.Image,
		&i.Visible,
	)
	return i, err
}

const getBrands = `-- name: GetBrands :many
SELECT id, sequence, store_id, name, image, visible FROM brands
WHERE
    visible = $1 OR $1 IS NULL
AND (name LIKE '%' || $2::text || '%' OR $2 = '')
`

type GetBrandsParams struct {
	Visible sql.NullBool
	Column2 string
}

func (q *Queries) GetBrands(ctx context.Context, arg GetBrandsParams) ([]Brand, error) {
	rows, err := q.db.QueryContext(ctx, getBrands, arg.Visible, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brand
	for rows.Next() {
		var i Brand
		if err := rows.Scan(
			&i.ID,
			&i.Sequence,
			&i.StoreID,
			&i.Name,
			&i.Image,
			&i.Visible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrand = `-- name: UpdateBrand :exec
UPDATE brands
SET name = $1, visible = $2, sequence = $3, image = $4
WHERE id = $5
`

type UpdateBrandParams struct {
	Name     string
	Visible  sql.NullBool
	Sequence int32
	Image    string
	ID       uuid.UUID
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) error {
	_, err := q.db.ExecContext(ctx, updateBrand,
		arg.Name,
		arg.Visible,
		arg.Sequence,
		arg.Image,
		arg.ID,
	)
	return err
}
