// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders_q.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createOrderBill = `-- name: CreateOrderBill :exec
INSERT INTO order_bills (
    id,
    order_code,
    product_total,
    shipping_fee,
    product_discount,
    shipping_discount,
    total_bill,
    user_id,
    delivery_info_id,
    paying_method
) VALUES ($1, $2, $3, $4, $5,
          $6, $7, $8, $9, $10)
`

type CreateOrderBillParams struct {
	ID               uuid.UUID
	OrderCode        string
	ProductTotal     int64
	ShippingFee      int64
	ProductDiscount  sql.NullInt64
	ShippingDiscount sql.NullInt64
	TotalBill        int64
	UserID           uuid.UUID
	DeliveryInfoID   uuid.UUID
	PayingMethod     NullPayingMethod
}

func (q *Queries) CreateOrderBill(ctx context.Context, arg CreateOrderBillParams) error {
	_, err := q.db.ExecContext(ctx, createOrderBill,
		arg.ID,
		arg.OrderCode,
		arg.ProductTotal,
		arg.ShippingFee,
		arg.ProductDiscount,
		arg.ShippingDiscount,
		arg.TotalBill,
		arg.UserID,
		arg.DeliveryInfoID,
		arg.PayingMethod,
	)
	return err
}

const createOrderBillSku = `-- name: CreateOrderBillSku :exec
INSERT INTO skus_order_bills (sku_id, order_id, vendor_id, quantity, price, offer_price)
VALUES ($1, $2, $3,$4, $5, $6)
`

type CreateOrderBillSkuParams struct {
	SkuID      uuid.UUID
	OrderID    uuid.UUID
	VendorID   uuid.UUID
	Quantity   int32
	Price      int64
	OfferPrice int64
}

func (q *Queries) CreateOrderBillSku(ctx context.Context, arg CreateOrderBillSkuParams) error {
	_, err := q.db.ExecContext(ctx, createOrderBillSku,
		arg.SkuID,
		arg.OrderID,
		arg.VendorID,
		arg.Quantity,
		arg.Price,
		arg.OfferPrice,
	)
	return err
}

const deleteOrderBill = `-- name: DeleteOrderBill :exec
DELETE FROM order_bills
WHERE id = $1
`

func (q *Queries) DeleteOrderBill(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrderBill, id)
	return err
}

const deleteOrderBillByOrderCode = `-- name: DeleteOrderBillByOrderCode :exec
DELETE FROM order_bills
WHERE order_code = $1
`

func (q *Queries) DeleteOrderBillByOrderCode(ctx context.Context, orderCode string) error {
	_, err := q.db.ExecContext(ctx, deleteOrderBillByOrderCode, orderCode)
	return err
}

const getAllOrderBills = `-- name: GetAllOrderBills :many
SELECT o.id, o.user_id, o.delivery_info_id, o.order_code, o.product_total, o.shipping_fee, o.product_discount, o.shipping_discount, o.total_bill, o.paying_method, o.order_status, o.created_at, o.updated_at
FROM order_bills o
WHERE (order_status = $1 OR $1 IS NULL) AND
    (order_code = $2 OR $2 = '') AND
    (paying_method = $3 OR $3 IS NULL)
`

type GetAllOrderBillsParams struct {
	OrderStatus  NullOrderStatus
	OrderCode    string
	PayingMethod NullPayingMethod
}

func (q *Queries) GetAllOrderBills(ctx context.Context, arg GetAllOrderBillsParams) ([]OrderBill, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderBills, arg.OrderStatus, arg.OrderCode, arg.PayingMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderBill
	for rows.Next() {
		var i OrderBill
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DeliveryInfoID,
			&i.OrderCode,
			&i.ProductTotal,
			&i.ShippingFee,
			&i.ProductDiscount,
			&i.ShippingDiscount,
			&i.TotalBill,
			&i.PayingMethod,
			&i.OrderStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrderBillsOfUser = `-- name: GetAllOrderBillsOfUser :many
SELECT o.id,
       o.order_status,
       v.store_name,
       v.banner,
       o.updated_at,
       o.total_bill,
       JSON_AGG(
               JSON_BUILD_OBJECT(
                       'product_name', p.name,
                       'images', p.images,
                       'variant_option', s.variant_option,
                       'quantity', sob.quantity,
                       'price', sob.price,
                       'offer_price', sob.offer_price
               )
       ) AS skus
FROM order_bills o
         INNER JOIN skus_order_bills sob ON o.id = sob.order_id
         INNER JOIN (SELECT s.id,
                            s.product_id,
                            JSON_AGG(
                                    JSON_BUILD_OBJECT(
                                            'product_variant', pv.name,
                                            'variant_options', vo.name
                                    )
                            ) AS variant_option
                     FROM skus s
                              INNER JOIN skus_variant_options svo ON s.id = svo.sku_id
                              INNER JOIN variant_options vo ON svo.variant_option = vo.id
                              INNER JOIN product_variants pv ON pv.id = vo.product_variant_id
                     GROUP BY s.id) s ON sob.sku_id = s.id
         INNER JOIN products p ON p.id = s.product_id
         INNER JOIN vendors v ON v.id = sob.vendor_id
WHERE o.user_id = $1
GROUP BY o.id,
         o.updated_at,
         o.order_status,
         v.store_name,
         v.banner
`

type GetAllOrderBillsOfUserRow struct {
	ID          uuid.UUID
	OrderStatus NullOrderStatus
	StoreName   string
	Banner      string
	UpdatedAt   sql.NullTime
	TotalBill   int64
	Skus        json.RawMessage
}

func (q *Queries) GetAllOrderBillsOfUser(ctx context.Context, userID uuid.UUID) ([]GetAllOrderBillsOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderBillsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllOrderBillsOfUserRow
	for rows.Next() {
		var i GetAllOrderBillsOfUserRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderStatus,
			&i.StoreName,
			&i.Banner,
			&i.UpdatedAt,
			&i.TotalBill,
			&i.Skus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrderBillsOfVendor = `-- name: GetAllOrderBillsOfVendor :many
SELECT sob.sku_id, sob.quantity, sob.order_id, sob.vendor_id, sob.is_prepared, sob.price, sob.offer_price, sob.updated_at
FROM skus_order_bills sob
         INNER JOIN order_bills o ON o.id = sob.order_id
WHERE sob.vendor_id = $1
  AND (sob.is_prepared = $2 OR $2 IS NULL)
  AND (o.order_status = 'pending')
ORDER BY sob.updated_at DESC
`

type GetAllOrderBillsOfVendorParams struct {
	VendorID   uuid.UUID
	IsPrepared sql.NullBool
}

func (q *Queries) GetAllOrderBillsOfVendor(ctx context.Context, arg GetAllOrderBillsOfVendorParams) ([]SkusOrderBill, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderBillsOfVendor, arg.VendorID, arg.IsPrepared)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SkusOrderBill
	for rows.Next() {
		var i SkusOrderBill
		if err := rows.Scan(
			&i.SkuID,
			&i.Quantity,
			&i.OrderID,
			&i.VendorID,
			&i.IsPrepared,
			&i.Price,
			&i.OfferPrice,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSkusByOrderId = `-- name: GetAllSkusByOrderId :many
SELECT sku_id, quantity, order_id, vendor_id, is_prepared, price, offer_price, updated_at
FROM skus_order_bills
WHERE order_id = $1 AND
    (is_prepared = $2 OR $2 IS NULl)
ORDER BY updated_at
`

type GetAllSkusByOrderIdParams struct {
	OrderID    uuid.UUID
	IsPrepared sql.NullBool
}

func (q *Queries) GetAllSkusByOrderId(ctx context.Context, arg GetAllSkusByOrderIdParams) ([]SkusOrderBill, error) {
	rows, err := q.db.QueryContext(ctx, getAllSkusByOrderId, arg.OrderID, arg.IsPrepared)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SkusOrderBill
	for rows.Next() {
		var i SkusOrderBill
		if err := rows.Scan(
			&i.SkuID,
			&i.Quantity,
			&i.OrderID,
			&i.VendorID,
			&i.IsPrepared,
			&i.Price,
			&i.OfferPrice,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderBillById = `-- name: GetOrderBillById :one
SELECT o.id, o.user_id, o.delivery_info_id, o.order_code, o.product_total, o.shipping_fee, o.product_discount, o.shipping_discount, o.total_bill, o.paying_method, o.order_status, o.created_at, o.updated_at,
       di.receiver_name,
       di.phone_number,
       di.address,
       di.email
FROM order_bills o
INNER JOIN delivery_info di ON o.delivery_info_id = di.id
WHERE o.id = $1
`

type GetOrderBillByIdRow struct {
	ID               uuid.UUID
	UserID           uuid.UUID
	DeliveryInfoID   uuid.UUID
	OrderCode        string
	ProductTotal     int64
	ShippingFee      int64
	ProductDiscount  sql.NullInt64
	ShippingDiscount sql.NullInt64
	TotalBill        int64
	PayingMethod     NullPayingMethod
	OrderStatus      NullOrderStatus
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
	ReceiverName     string
	PhoneNumber      string
	Address          string
	Email            string
}

func (q *Queries) GetOrderBillById(ctx context.Context, id uuid.UUID) (GetOrderBillByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderBillById, id)
	var i GetOrderBillByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DeliveryInfoID,
		&i.OrderCode,
		&i.ProductTotal,
		&i.ShippingFee,
		&i.ProductDiscount,
		&i.ShippingDiscount,
		&i.TotalBill,
		&i.PayingMethod,
		&i.OrderStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ReceiverName,
		&i.PhoneNumber,
		&i.Address,
		&i.Email,
	)
	return i, err
}

const updateOrderBillsOfVendor = `-- name: UpdateOrderBillsOfVendor :exec
UPDATE skus_order_bills
SET is_prepared = $1
WHERE vendor_id = $2 AND order_id = $3
`

type UpdateOrderBillsOfVendorParams struct {
	IsPrepared sql.NullBool
	VendorID   uuid.UUID
	OrderID    uuid.UUID
}

func (q *Queries) UpdateOrderBillsOfVendor(ctx context.Context, arg UpdateOrderBillsOfVendorParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderBillsOfVendor, arg.IsPrepared, arg.VendorID, arg.OrderID)
	return err
}

const updateStatusOrderBill = `-- name: UpdateStatusOrderBill :exec
UPDATE order_bills
SET order_status = $1
WHERE id = $2
`

type UpdateStatusOrderBillParams struct {
	OrderStatus NullOrderStatus
	ID          uuid.UUID
}

func (q *Queries) UpdateStatusOrderBill(ctx context.Context, arg UpdateStatusOrderBillParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusOrderBill, arg.OrderStatus, arg.ID)
	return err
}

const updateStatusOrderBillByOrderCode = `-- name: UpdateStatusOrderBillByOrderCode :exec
UPDATE order_bills
SET order_status = $1
WHERE order_code = $2
`

type UpdateStatusOrderBillByOrderCodeParams struct {
	OrderStatus NullOrderStatus
	OrderCode   string
}

func (q *Queries) UpdateStatusOrderBillByOrderCode(ctx context.Context, arg UpdateStatusOrderBillByOrderCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusOrderBillByOrderCode, arg.OrderStatus, arg.OrderCode)
	return err
}
