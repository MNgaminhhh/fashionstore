// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: delivery_info_q.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDeliveryInfo = `-- name: CreateDeliveryInfo :exec
INSERT INTO delivery_info (user_id, receiver_name, address, phone_number, email)
VALUES ($1, $2, $3, $4, $5)
`

type CreateDeliveryInfoParams struct {
	UserID       uuid.UUID
	ReceiverName string
	Address      string
	PhoneNumber  string
	Email        string
}

func (q *Queries) CreateDeliveryInfo(ctx context.Context, arg CreateDeliveryInfoParams) error {
	_, err := q.db.ExecContext(ctx, createDeliveryInfo,
		arg.UserID,
		arg.ReceiverName,
		arg.Address,
		arg.PhoneNumber,
		arg.Email,
	)
	return err
}

const deleteDeliveryInfo = `-- name: DeleteDeliveryInfo :exec
DELETE FROM delivery_info
WHERE id = $1
`

func (q *Queries) DeleteDeliveryInfo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDeliveryInfo, id)
	return err
}

const getAllDeliveryInfoByUserId = `-- name: GetAllDeliveryInfoByUserId :many
SELECT id, user_id, receiver_name, address, phone_number, email, created_at, updated_at
FROM delivery_info
WHERE user_id = $1
`

func (q *Queries) GetAllDeliveryInfoByUserId(ctx context.Context, userID uuid.UUID) ([]DeliveryInfo, error) {
	rows, err := q.db.QueryContext(ctx, getAllDeliveryInfoByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeliveryInfo
	for rows.Next() {
		var i DeliveryInfo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ReceiverName,
			&i.Address,
			&i.PhoneNumber,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeliveryInfoById = `-- name: GetDeliveryInfoById :one
SELECT id, user_id, receiver_name, address, phone_number, email, created_at, updated_at
FROM delivery_info
WHERE id = $1
`

func (q *Queries) GetDeliveryInfoById(ctx context.Context, id uuid.UUID) (DeliveryInfo, error) {
	row := q.db.QueryRowContext(ctx, getDeliveryInfoById, id)
	var i DeliveryInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ReceiverName,
		&i.Address,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeliveryInfoById = `-- name: UpdateDeliveryInfoById :exec
UPDATE delivery_info
SET receiver_name = $1, address = $2, phone_number = $3, email = $4
WHERE id = $5
`

type UpdateDeliveryInfoByIdParams struct {
	ReceiverName string
	Address      string
	PhoneNumber  string
	Email        string
	ID           uuid.UUID
}

func (q *Queries) UpdateDeliveryInfoById(ctx context.Context, arg UpdateDeliveryInfoByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateDeliveryInfoById,
		arg.ReceiverName,
		arg.Address,
		arg.PhoneNumber,
		arg.Email,
		arg.ID,
	)
	return err
}
