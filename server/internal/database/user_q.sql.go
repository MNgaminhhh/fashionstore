// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_q.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNewUser = `-- name: CreateNewUser :exec
INSERT INTO users (email, password)
VALUES ($1, $2)
`

type CreateNewUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (error, error) {
	_, err := q.db.ExecContext(ctx, createNewUser, arg.Email, arg.Password)
	return err, nil
}

const getAllUser = `-- name: GetAllUser :many
SELECT id, email, password, status, full_name, phone_number, dob, role
FROM users
`

func (q *Queries) GetAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Status,
			&i.FullName,
			&i.PhoneNumber,
			&i.Dob,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserActived = `-- name: GetUserActived :many
SELECT id, email, password, status, full_name, phone_number, dob, role
FROM users
WHERE status = $1
`

func (q *Queries) GetUserActived(ctx context.Context, status UserStatus) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserActived, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Status,
			&i.FullName,
			&i.PhoneNumber,
			&i.Dob,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, status, full_name, phone_number, dob, role
From users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.FullName,
		&i.PhoneNumber,
		&i.Dob,
		&i.Role,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, status, full_name, phone_number, dob, role FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.FullName,
		&i.PhoneNumber,
		&i.Dob,
		&i.Role,
	)
	return i, err
}

const updateNewPassword = `-- name: UpdateNewPassword :exec
UPDATE users
SET password = $1
WHERE email = $2
`

type UpdateNewPasswordParams struct {
	Password string
	Email    string
}

func (q *Queries) UpdateNewPassword(ctx context.Context, arg UpdateNewPasswordParams) (error, error) {
	_, err := q.db.ExecContext(ctx, updateNewPassword, arg.Password, arg.Email)
	return err, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE  users
SET full_name = $1, phone_number = $2, dob = $3
WHERE id = $4
`

type UpdateUserParams struct {
	FullName    sql.NullString
	PhoneNumber sql.NullString
	Dob         sql.NullTime
	ID          uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (error, error) {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.FullName,
		arg.PhoneNumber,
		arg.Dob,
		arg.ID,
	)
	return err, nil
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users
SET status = $1
WHERE email = $2
`

type UpdateUserStatusParams struct {
	Status UserStatus
	Email  string
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (error, error) {
	_, err := q.db.ExecContext(ctx, updateUserStatus, arg.Status, arg.Email)
	return err, nil
}
