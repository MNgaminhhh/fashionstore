// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: vendor_q.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addVendor = `-- name: AddVendor :exec
INSERT INTO vendors (user_id,
                     full_name,
                     email,
                     phone_number,
                     store_name,
                     description,
                     address,
                     banner,
                     created_by,
                     updated_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type AddVendorParams struct {
	UserID      uuid.UUID
	FullName    string
	Email       string
	PhoneNumber string
	StoreName   string
	Description sql.NullString
	Address     string
	Banner      string
	CreatedBy   uuid.NullUUID
	UpdatedBy   uuid.NullUUID
}

func (q *Queries) AddVendor(ctx context.Context, arg AddVendorParams) error {
	_, err := q.db.ExecContext(ctx, addVendor,
		arg.UserID,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.StoreName,
		arg.Description,
		arg.Address,
		arg.Banner,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	return err
}

const getVendorByUserId = `-- name: GetVendorByUserId :one
SELECT id, user_id, full_name, email, phone_number, store_name, status, description, address, banner, created_at, updated_at, created_by, updated_by FROM vendors
WHERE vendors.user_id = $1
`

func (q *Queries) GetVendorByUserId(ctx context.Context, userID uuid.UUID) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, getVendorByUserId, userID)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.StoreName,
		&i.Status,
		&i.Description,
		&i.Address,
		&i.Banner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateVendorStatus = `-- name: UpdateVendorStatus :exec
UPDATE vendors
SET status = $1, updated_by = $2
WHERE user_id = $3
`

type UpdateVendorStatusParams struct {
	Status    VendorsStatus
	UpdatedBy uuid.NullUUID
	UserID    uuid.UUID
}

func (q *Queries) UpdateVendorStatus(ctx context.Context, arg UpdateVendorStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateVendorStatus, arg.Status, arg.UpdatedBy, arg.UserID)
	return err
}
