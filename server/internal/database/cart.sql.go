// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createCartItem = `-- name: CreateCartItem :exec
INSERT INTO cart (user_id, sku_id, quantity) VALUES ($1, $2, $3)
`

type CreateCartItemParams struct {
	UserID   uuid.UUID
	SkuID    uuid.UUID
	Quantity int32
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) error {
	_, err := q.db.ExecContext(ctx, createCartItem, arg.UserID, arg.SkuID, arg.Quantity)
	return err
}

const deleteSkuItemInCartById = `-- name: DeleteSkuItemInCartById :exec
DELETE FROM cart
WHERE id = $1
`

func (q *Queries) DeleteSkuItemInCartById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSkuItemInCartById, id)
	return err
}

const getAllSkuItemInCartByUserId = `-- name: GetAllSkuItemInCartByUserId :many
SELECT c.id, c.user_id, c.sku_id, c.quantity, c.updated_at, s.price, (s.price*(100-s.offer)/100) AS offer_price, p.id AS product_id, p.images,
       v.store_name, v.banner
FROM cart c
INNER JOIN skus s ON c.sku_id = s.id
INNER JOIN products p ON s.product_id = p.id
INNER JOIN vendors v ON p.vendor_id = v.id
WHERE c.user_id = $1
ORDER BY c.updated_at DESC
`

type GetAllSkuItemInCartByUserIdRow struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	SkuID      uuid.UUID
	Quantity   int32
	UpdatedAt  sql.NullTime
	Price      int64
	OfferPrice int32
	ProductID  uuid.UUID
	Images     json.RawMessage
	StoreName  string
	Banner     string
}

func (q *Queries) GetAllSkuItemInCartByUserId(ctx context.Context, userID uuid.UUID) ([]GetAllSkuItemInCartByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSkuItemInCartByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSkuItemInCartByUserIdRow
	for rows.Next() {
		var i GetAllSkuItemInCartByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SkuID,
			&i.Quantity,
			&i.UpdatedAt,
			&i.Price,
			&i.OfferPrice,
			&i.ProductID,
			&i.Images,
			&i.StoreName,
			&i.Banner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSkuItemInCartById = `-- name: GetSkuItemInCartById :one
SELECT id, user_id, sku_id, quantity, updated_at
FROM cart
WHERE id = $1
`

func (q *Queries) GetSkuItemInCartById(ctx context.Context, id uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getSkuItemInCartById, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkuID,
		&i.Quantity,
		&i.UpdatedAt,
	)
	return i, err
}

const getSkuItemInCartBySkuId = `-- name: GetSkuItemInCartBySkuId :one
SELECT id, user_id, sku_id, quantity, updated_at
FROM cart
WHERE sku_id = $1 AND user_id = $2
`

type GetSkuItemInCartBySkuIdParams struct {
	SkuID  uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetSkuItemInCartBySkuId(ctx context.Context, arg GetSkuItemInCartBySkuIdParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getSkuItemInCartBySkuId, arg.SkuID, arg.UserID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SkuID,
		&i.Quantity,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSkuItemInCart = `-- name: UpdateSkuItemInCart :exec
UPDATE cart
SET quantity = $1
WHERE id = $2
`

type UpdateSkuItemInCartParams struct {
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateSkuItemInCart(ctx context.Context, arg UpdateSkuItemInCartParams) error {
	_, err := q.db.ExecContext(ctx, updateSkuItemInCart, arg.Quantity, arg.ID)
	return err
}
