// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: condition_q.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createCondition = `-- name: CreateCondition :exec
INSERT INTO conditions (field, operator, value, description) VALUES ($1, $2, $3, $4)
`

type CreateConditionParams struct {
	Field       ConditionField
	Operator    ComparisonOperator
	Value       json.RawMessage
	Description string
}

func (q *Queries) CreateCondition(ctx context.Context, arg CreateConditionParams) error {
	_, err := q.db.ExecContext(ctx, createCondition,
		arg.Field,
		arg.Operator,
		arg.Value,
		arg.Description,
	)
	return err
}

const deleteCondition = `-- name: DeleteCondition :exec
DELETE FROM conditions
WHERE id = $1
`

func (q *Queries) DeleteCondition(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCondition, id)
	return err
}

const getAllCondition = `-- name: GetAllCondition :many
SELECT id, field, operator, value, description
FROM conditions
WHERE (description ILIKE '%' || $1 || '%' OR $1 IS NULL)
`

func (q *Queries) GetAllCondition(ctx context.Context, dollar_1 sql.NullString) ([]Condition, error) {
	rows, err := q.db.QueryContext(ctx, getAllCondition, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Condition
	for rows.Next() {
		var i Condition
		if err := rows.Scan(
			&i.ID,
			&i.Field,
			&i.Operator,
			&i.Value,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConditionById = `-- name: GetConditionById :one
SELECT id, field, operator, value, description
FROM conditions
WHERE id = $1
`

func (q *Queries) GetConditionById(ctx context.Context, id uuid.UUID) (Condition, error) {
	row := q.db.QueryRowContext(ctx, getConditionById, id)
	var i Condition
	err := row.Scan(
		&i.ID,
		&i.Field,
		&i.Operator,
		&i.Value,
		&i.Description,
	)
	return i, err
}

const updateCondition = `-- name: UpdateCondition :exec
UPDATE conditions
SET field = $1, operator = $2, value = $3, description = $4
WHERE id = $5
`

type UpdateConditionParams struct {
	Field       ConditionField
	Operator    ComparisonOperator
	Value       json.RawMessage
	Description string
	ID          uuid.UUID
}

func (q *Queries) UpdateCondition(ctx context.Context, arg UpdateConditionParams) error {
	_, err := q.db.ExecContext(ctx, updateCondition,
		arg.Field,
		arg.Operator,
		arg.Value,
		arg.Description,
		arg.ID,
	)
	return err
}
