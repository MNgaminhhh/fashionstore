// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: coupons_users_q.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCouponUser = `-- name: CreateCouponUser :exec
INSERT INTO coupons_users (coupon_id, user_id, order_id) VALUES ($1, $2, $3)
`

type CreateCouponUserParams struct {
	CouponID uuid.UUID
	UserID   uuid.UUID
	OrderID  uuid.NullUUID
}

func (q *Queries) CreateCouponUser(ctx context.Context, arg CreateCouponUserParams) error {
	_, err := q.db.ExecContext(ctx, createCouponUser, arg.CouponID, arg.UserID, arg.OrderID)
	return err
}

const getCouponUserByCouponIdAndUserId = `-- name: GetCouponUserByCouponIdAndUserId :one
SELECT coupon_id, user_id, order_id, created_at
FROM coupons_users
WHERE coupon_id = $1 AND user_id = $2
`

type GetCouponUserByCouponIdAndUserIdParams struct {
	CouponID uuid.UUID
	UserID   uuid.UUID
}

func (q *Queries) GetCouponUserByCouponIdAndUserId(ctx context.Context, arg GetCouponUserByCouponIdAndUserIdParams) (CouponsUser, error) {
	row := q.db.QueryRowContext(ctx, getCouponUserByCouponIdAndUserId, arg.CouponID, arg.UserID)
	var i CouponsUser
	err := row.Scan(
		&i.CouponID,
		&i.UserID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}
